{"ast":null,"code":"var _jsxFileName = \"/Users/maximiliandazer/Process Control chart/Process-Control-chart/frontend/src/components/data/FileUpload.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Button, Typography, Alert, LinearProgress, FormControl, InputLabel, Select, MenuItem, Chip, Stack } from '@mui/material';\nimport { CloudUpload, Assessment } from '@mui/icons-material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = ({\n  onDataChange,\n  metricType = 'cycle_time'\n}) => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [preview, setPreview] = useState(null);\n  const [selectedMetricType, setSelectedMetricType] = useState(metricType);\n  const parseNaveCSV = async file => {\n    const text = await file.text();\n    const lines = text.split('\\n').filter(line => line.trim());\n    if (lines.length < 2) {\n      throw new Error('CSV file must contain at least a header row and one data row');\n    }\n\n    // Parse header to find relevant columns\n    const headers = lines[0].split(',').map(h => h.trim().toLowerCase());\n\n    // Map Nave column names to our expected fields\n    const columnMap = {\n      taskKey: headers.findIndex(h => h.includes('task key') || h.includes('id')),\n      taskName: headers.findIndex(h => h.includes('task name') || h.includes('name')),\n      startDate: headers.findIndex(h => h.includes('start date')),\n      endDate: headers.findIndex(h => h.includes('end date')),\n      status: headers.findIndex(h => h.includes('status')),\n      resolution: headers.findIndex(h => h.includes('resolution')),\n      // Nave provides detailed time tracking in minutes\n      backlogTime: headers.findIndex(h => h.includes('backlog (mins)')),\n      inProcessTime: headers.findIndex(h => h.includes('in process (mins)')),\n      totalTime: headers.findIndex(h => h.includes('total (mins)'))\n    };\n\n    // Validate required columns exist\n    if (columnMap.startDate === -1 || columnMap.endDate === -1) {\n      throw new Error('CSV must contain \"Start date\" and \"End date\" columns for flow metrics analysis');\n    }\n    const completedTasks = [];\n    let filteredOutCount = 0;\n    for (let i = 1; i < lines.length; i++) {\n      var _columns$columnMap$st, _columns$columnMap$re;\n      const columns = lines[i].split(',').map(c => c.trim().replace(/\"/g, ''));\n      if (columns.length < Math.max(...Object.values(columnMap).filter(v => v !== -1))) {\n        continue; // Skip incomplete rows\n      }\n      const taskKey = columns[columnMap.taskKey] || `Task-${i}`;\n      const taskName = columns[columnMap.taskName] || 'Unnamed Task';\n      const startDateStr = columns[columnMap.startDate];\n      const endDateStr = columns[columnMap.endDate];\n      const status = (_columns$columnMap$st = columns[columnMap.status]) === null || _columns$columnMap$st === void 0 ? void 0 : _columns$columnMap$st.toLowerCase();\n      const resolution = (_columns$columnMap$re = columns[columnMap.resolution]) === null || _columns$columnMap$re === void 0 ? void 0 : _columns$columnMap$re.toLowerCase();\n\n      // Enhanced filtering based on your requirements\n      // 1. Exclude items with \"Won't fix\" status\n      if (status !== null && status !== void 0 && status.includes(\"won't fix\") || status !== null && status !== void 0 && status.includes(\"wont fix\")) {\n        filteredOutCount++;\n        continue;\n      }\n\n      // 2. Only include items with \"Done\" resolution\n      if (columnMap.resolution !== -1 && resolution && !resolution.includes('done')) {\n        filteredOutCount++;\n        continue;\n      }\n\n      // 3. Fallback to status check if no resolution column\n      if (columnMap.resolution === -1 && !(status !== null && status !== void 0 && status.includes('done')) && !(status !== null && status !== void 0 && status.includes('completed'))) {\n        filteredOutCount++;\n        continue;\n      }\n      if (!startDateStr || !endDateStr || endDateStr.toLowerCase().includes('backlog')) {\n        filteredOutCount++;\n        continue; // Skip tasks without completion dates\n      }\n      try {\n        const startDate = new Date(startDateStr);\n        const endDate = new Date(endDateStr);\n        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n          filteredOutCount++;\n          continue; // Skip invalid dates\n        }\n\n        // Calculate cycle time for statistics (even for throughput analysis)\n        const cycleTimeMs = endDate.getTime() - startDate.getTime();\n        const cycleTimeDays = cycleTimeMs / (1000 * 60 * 60 * 24);\n        completedTasks.push({\n          taskKey,\n          taskName,\n          startDate,\n          endDate,\n          cycleTime: cycleTimeDays,\n          status,\n          resolution\n        });\n      } catch (error) {\n        console.warn(`Skipping row ${i} due to date parsing error:`, error);\n        filteredOutCount++;\n        continue;\n      }\n    }\n    if (completedTasks.length === 0) {\n      throw new Error('No completed tasks found that meet the criteria. PBC analysis requires completed work items (Done status/resolution) with start and end dates.');\n    }\n\n    // Sort by completion date for proper time series analysis (Vacanti's requirement)\n    completedTasks.sort((a, b) => a.endDate.getTime() - b.endDate.getTime());\n    let data = [];\n    if (selectedMetricType === 'cycle_time') {\n      // For cycle time analysis: each task becomes a data point with its cycle time\n      data = completedTasks.map((task, index) => ({\n        timestamp: task.endDate,\n        value: Math.round(task.cycleTime * 100) / 100,\n        // Round to 2 decimal places\n        label: `${task.taskKey}: ${task.taskName} (${task.cycleTime.toFixed(1)} days)`,\n        taskKey: task.taskKey,\n        taskName: task.taskName,\n        cycleTimeDays: task.cycleTime\n      }));\n    } else {\n      // For throughput analysis: each completed item becomes a data point with value=1\n      // The backend will group these by time periods to calculate throughput\n      data = completedTasks.map((task, index) => ({\n        timestamp: task.endDate,\n        value: 1,\n        // Each completed item counts as 1 for throughput calculation\n        label: `${task.taskKey}: ${task.taskName}`,\n        taskKey: task.taskKey,\n        taskName: task.taskName\n      }));\n    }\n\n    // Calculate statistics for preview\n    const cycleTimeValues = completedTasks.map(t => t.cycleTime);\n    const avgCycleTime = cycleTimeValues.reduce((sum, val) => sum + val, 0) / cycleTimeValues.length;\n\n    // Count duplicate timestamps (for informational purposes)\n    const timestamps = data.map(d => d.timestamp.getTime());\n    const uniqueTimestamps = new Set(timestamps);\n    const duplicateTimestamps = timestamps.length - uniqueTimestamps.size;\n    setPreview({\n      totalTasks: completedTasks.length + filteredOutCount,\n      completedTasks: completedTasks.length,\n      filteredOutTasks: filteredOutCount,\n      dateRange: {\n        start: new Date(Math.min(...data.map(d => d.timestamp.getTime()))),\n        end: new Date(Math.max(...data.map(d => d.timestamp.getTime())))\n      },\n      avgCycleTime,\n      duplicateTimestamps\n    });\n    return data;\n  };\n  const handleFileUpload = async event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (!file) return;\n    setLoading(true);\n    setError(null);\n    setPreview(null);\n    try {\n      // Validate file type\n      if (!file.name.toLowerCase().endsWith('.csv')) {\n        throw new Error('Please upload a CSV file');\n      }\n\n      // Validate file size (32MB limit as per Nave documentation)\n      if (file.size > 32 * 1024 * 1024) {\n        throw new Error('File size exceeds 32MB limit');\n      }\n      const pbcData = await parseNaveCSV(file);\n\n      // Validate minimum data points for meaningful PBC analysis\n      const minRequired = selectedMetricType === 'cycle_time' ? 6 : 10;\n      if (pbcData.length < minRequired) {\n        throw new Error(`Only ${pbcData.length} completed tasks found that meet the criteria. Minimum ${minRequired} data points required for meaningful ${selectedMetricType === 'cycle_time' ? 'Cycle Time' : 'Throughput'} analysis as per Vacanti's methodology.`);\n      }\n      onDataChange(pbcData);\n    } catch (err) {\n      setError(err.message || 'Failed to parse Nave CSV file');\n      setPreview(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Upload Nave CSV File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      sx: {\n        mb: 2\n      },\n      children: \"Upload a CSV file exported from Nave to analyze your flow metrics using Process Behaviour Charts. Only completed tasks (Done status/resolution) will be included, excluding \\\"Won't fix\\\" items.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      sx: {\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        children: \"Flow Metric to Analyze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        value: selectedMetricType,\n        onChange: e => setSelectedMetricType(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"cycle_time\",\n          children: \"Cycle Time (Days) - Time from start to completion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"throughput\",\n          children: \"Throughput (Items/Period) - Items completed per time period\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      component: \"label\",\n      startIcon: /*#__PURE__*/_jsxDEV(CloudUpload, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 20\n      }, this),\n      disabled: loading,\n      fullWidth: true,\n      sx: {\n        mb: 2\n      },\n      children: [\"Choose Nave CSV File\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".csv,text/csv,application/csv\",\n        hidden: true,\n        onChange: handleFileUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        sx: {\n          mt: 1\n        },\n        children: [\"Processing Nave data for \", selectedMetricType === 'cycle_time' ? 'cycle time' : 'throughput', \" analysis...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle2\",\n        gutterBottom: true,\n        children: \"Upload Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }, this), error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }, this), preview && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"success\",\n      sx: {\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle2\",\n        gutterBottom: true,\n        children: [/*#__PURE__*/_jsxDEV(Assessment, {\n          sx: {\n            mr: 1,\n            verticalAlign: 'middle'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this), \"Nave Data Successfully Processed for \", selectedMetricType === 'cycle_time' ? 'Cycle Time' : 'Throughput', \" Analysis\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"row\",\n        spacing: 1,\n        sx: {\n          mb: 1,\n          flexWrap: 'wrap'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Chip, {\n          label: `${preview.completedTasks} completed tasks included`,\n          size: \"small\",\n          color: \"success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Chip, {\n          label: `${preview.filteredOutTasks} tasks filtered out`,\n          size: \"small\",\n          color: \"info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this), selectedMetricType === 'cycle_time' ? /*#__PURE__*/_jsxDEV(Chip, {\n          label: `Avg Cycle Time: ${preview.avgCycleTime.toFixed(1)} days`,\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Chip, {\n          label: `${preview.completedTasks} items for throughput calculation`,\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 15\n        }, this), preview.duplicateTimestamps > 0 && /*#__PURE__*/_jsxDEV(Chip, {\n          label: `${preview.duplicateTimestamps} items completed on same day`,\n          size: \"small\",\n          color: \"info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"Date range: \", preview.dateRange.start.toLocaleDateString(), \" to \", preview.dateRange.end.toLocaleDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        sx: {\n          mt: 1\n        },\n        children: [\"Ready for \", selectedMetricType === 'cycle_time' ? 'Cycle Time' : 'Throughput', \" Process Behaviour Chart analysis. Data is chronologically ordered and meets Vacanti's requirements for meaningful XmR chart analysis.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }, this), selectedMetricType === 'throughput' && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        sx: {\n          mt: 1,\n          fontStyle: 'italic'\n        },\n        children: \"For throughput analysis, each completed item will be grouped by time periods to calculate items completed per period.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 2,\n        p: 2,\n        bgcolor: 'grey.50',\n        borderRadius: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle2\",\n        gutterBottom: true,\n        children: [selectedMetricType === 'cycle_time' ? 'Cycle Time Analysis' : 'Throughput Analysis', \" - Filtering Rules Applied:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        component: \"ul\",\n        sx: {\n          pl: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u2705 Include: Tasks with \\\"Done\\\" status or \\\"Done\\\" resolution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u274C Exclude: Tasks with \\\"Won't fix\\\" status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u274C Exclude: Tasks with non-\\\"Done\\\" resolutions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\u274C Exclude: Tasks without completion dates\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this), selectedMetricType === 'cycle_time' ? /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\uD83D\\uDCCA Result: Each task becomes a data point with its cycle time in days\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\uD83D\\uDCCA Result: Each completed item (value=1) will be grouped by time periods for throughput calculation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"\\uD83C\\uDFAF Hover over chart points to see Task Key and Task Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"gY9B2DsGg6wHbUjZ/KZ2NctGvuY=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","Box","Button","Typography","Alert","LinearProgress","FormControl","InputLabel","Select","MenuItem","Chip","Stack","CloudUpload","Assessment","jsxDEV","_jsxDEV","FileUpload","onDataChange","metricType","_s","loading","setLoading","error","setError","preview","setPreview","selectedMetricType","setSelectedMetricType","parseNaveCSV","file","text","lines","split","filter","line","trim","length","Error","headers","map","h","toLowerCase","columnMap","taskKey","findIndex","includes","taskName","startDate","endDate","status","resolution","backlogTime","inProcessTime","totalTime","completedTasks","filteredOutCount","i","_columns$columnMap$st","_columns$columnMap$re","columns","c","replace","Math","max","Object","values","v","startDateStr","endDateStr","Date","isNaN","getTime","cycleTimeMs","cycleTimeDays","push","cycleTime","console","warn","sort","a","b","data","task","index","timestamp","value","round","label","toFixed","cycleTimeValues","t","avgCycleTime","reduce","sum","val","timestamps","d","uniqueTimestamps","Set","duplicateTimestamps","size","totalTasks","filteredOutTasks","dateRange","start","min","end","handleFileUpload","event","_event$target$files","target","files","name","endsWith","pbcData","minRequired","err","message","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","sx","mb","fullWidth","onChange","e","component","startIcon","disabled","type","accept","hidden","mt","severity","mr","verticalAlign","direction","spacing","flexWrap","toLocaleDateString","fontStyle","p","bgcolor","borderRadius","pl","_c","$RefreshReg$"],"sources":["/Users/maximiliandazer/Process Control chart/Process-Control-chart/frontend/src/components/data/FileUpload.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  Button,\n  Typography,\n  Alert,\n  LinearProgress,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  Stack\n} from '@mui/material';\nimport { CloudUpload, Assessment } from '@mui/icons-material';\nimport { DataPoint } from '../../types';\n\ninterface FileUploadProps {\n  onDataChange: (data: DataPoint[]) => void;\n  metricType?: 'cycle_time' | 'throughput';\n}\n\ninterface NaveDataPreview {\n  totalTasks: number;\n  completedTasks: number;\n  filteredOutTasks: number;\n  dateRange: { start: Date; end: Date };\n  avgCycleTime: number;\n  duplicateTimestamps: number;\n}\n\nconst FileUpload: React.FC<FileUploadProps> = ({ onDataChange, metricType = 'cycle_time' }) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [preview, setPreview] = useState<NaveDataPreview | null>(null);\n  const [selectedMetricType, setSelectedMetricType] = useState<'cycle_time' | 'throughput'>(metricType);\n\n  const parseNaveCSV = async (file: File): Promise<DataPoint[]> => {\n    const text = await file.text();\n    const lines = text.split('\\n').filter(line => line.trim());\n    \n    if (lines.length < 2) {\n      throw new Error('CSV file must contain at least a header row and one data row');\n    }\n\n    // Parse header to find relevant columns\n    const headers = lines[0].split(',').map(h => h.trim().toLowerCase());\n    \n    // Map Nave column names to our expected fields\n    const columnMap = {\n      taskKey: headers.findIndex(h => h.includes('task key') || h.includes('id')),\n      taskName: headers.findIndex(h => h.includes('task name') || h.includes('name')),\n      startDate: headers.findIndex(h => h.includes('start date')),\n      endDate: headers.findIndex(h => h.includes('end date')),\n      status: headers.findIndex(h => h.includes('status')),\n      resolution: headers.findIndex(h => h.includes('resolution')),\n      // Nave provides detailed time tracking in minutes\n      backlogTime: headers.findIndex(h => h.includes('backlog (mins)')),\n      inProcessTime: headers.findIndex(h => h.includes('in process (mins)')),\n      totalTime: headers.findIndex(h => h.includes('total (mins)'))\n    };\n\n    // Validate required columns exist\n    if (columnMap.startDate === -1 || columnMap.endDate === -1) {\n      throw new Error('CSV must contain \"Start date\" and \"End date\" columns for flow metrics analysis');\n    }\n\n    const completedTasks: any[] = [];\n    let filteredOutCount = 0;\n    \n    for (let i = 1; i < lines.length; i++) {\n      const columns = lines[i].split(',').map(c => c.trim().replace(/\"/g, ''));\n      \n      if (columns.length < Math.max(...Object.values(columnMap).filter(v => v !== -1))) {\n        continue; // Skip incomplete rows\n      }\n\n      const taskKey = columns[columnMap.taskKey] || `Task-${i}`;\n      const taskName = columns[columnMap.taskName] || 'Unnamed Task';\n      const startDateStr = columns[columnMap.startDate];\n      const endDateStr = columns[columnMap.endDate];\n      const status = columns[columnMap.status]?.toLowerCase();\n      const resolution = columns[columnMap.resolution]?.toLowerCase();\n      \n      // Enhanced filtering based on your requirements\n      // 1. Exclude items with \"Won't fix\" status\n      if (status?.includes(\"won't fix\") || status?.includes(\"wont fix\")) {\n        filteredOutCount++;\n        continue;\n      }\n      \n      // 2. Only include items with \"Done\" resolution\n      if (columnMap.resolution !== -1 && resolution && !resolution.includes('done')) {\n        filteredOutCount++;\n        continue;\n      }\n      \n      // 3. Fallback to status check if no resolution column\n      if (columnMap.resolution === -1 && !status?.includes('done') && !status?.includes('completed')) {\n        filteredOutCount++;\n        continue;\n      }\n\n      if (!startDateStr || !endDateStr || endDateStr.toLowerCase().includes('backlog')) {\n        filteredOutCount++;\n        continue; // Skip tasks without completion dates\n      }\n\n      try {\n        const startDate = new Date(startDateStr);\n        const endDate = new Date(endDateStr);\n        \n        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n          filteredOutCount++;\n          continue; // Skip invalid dates\n        }\n\n        // Calculate cycle time for statistics (even for throughput analysis)\n        const cycleTimeMs = endDate.getTime() - startDate.getTime();\n        const cycleTimeDays = cycleTimeMs / (1000 * 60 * 60 * 24);\n\n        completedTasks.push({\n          taskKey,\n          taskName,\n          startDate,\n          endDate,\n          cycleTime: cycleTimeDays,\n          status,\n          resolution\n        });\n        \n      } catch (error) {\n        console.warn(`Skipping row ${i} due to date parsing error:`, error);\n        filteredOutCount++;\n        continue;\n      }\n    }\n\n    if (completedTasks.length === 0) {\n      throw new Error('No completed tasks found that meet the criteria. PBC analysis requires completed work items (Done status/resolution) with start and end dates.');\n    }\n\n    // Sort by completion date for proper time series analysis (Vacanti's requirement)\n    completedTasks.sort((a, b) => a.endDate.getTime() - b.endDate.getTime());\n\n    let data: DataPoint[] = [];\n\n    if (selectedMetricType === 'cycle_time') {\n      // For cycle time analysis: each task becomes a data point with its cycle time\n      data = completedTasks.map((task, index) => ({\n        timestamp: task.endDate,\n        value: Math.round(task.cycleTime * 100) / 100, // Round to 2 decimal places\n        label: `${task.taskKey}: ${task.taskName} (${task.cycleTime.toFixed(1)} days)`,\n        taskKey: task.taskKey,\n        taskName: task.taskName,\n        cycleTimeDays: task.cycleTime\n      } as DataPoint & { taskKey: string; taskName: string; cycleTimeDays: number }));\n    } else {\n      // For throughput analysis: each completed item becomes a data point with value=1\n      // The backend will group these by time periods to calculate throughput\n      data = completedTasks.map((task, index) => ({\n        timestamp: task.endDate,\n        value: 1, // Each completed item counts as 1 for throughput calculation\n        label: `${task.taskKey}: ${task.taskName}`,\n        taskKey: task.taskKey,\n        taskName: task.taskName\n      } as DataPoint & { taskKey: string; taskName: string }));\n    }\n\n    // Calculate statistics for preview\n    const cycleTimeValues = completedTasks.map(t => t.cycleTime);\n    const avgCycleTime = cycleTimeValues.reduce((sum, val) => sum + val, 0) / cycleTimeValues.length;\n    \n    // Count duplicate timestamps (for informational purposes)\n    const timestamps = data.map(d => d.timestamp.getTime());\n    const uniqueTimestamps = new Set(timestamps);\n    const duplicateTimestamps = timestamps.length - uniqueTimestamps.size;\n    \n    setPreview({\n      totalTasks: completedTasks.length + filteredOutCount,\n      completedTasks: completedTasks.length,\n      filteredOutTasks: filteredOutCount,\n      dateRange: {\n        start: new Date(Math.min(...data.map(d => d.timestamp.getTime()))),\n        end: new Date(Math.max(...data.map(d => d.timestamp.getTime())))\n      },\n      avgCycleTime,\n      duplicateTimestamps\n    });\n\n    return data;\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setLoading(true);\n    setError(null);\n    setPreview(null);\n\n    try {\n      // Validate file type\n      if (!file.name.toLowerCase().endsWith('.csv')) {\n        throw new Error('Please upload a CSV file');\n      }\n\n      // Validate file size (32MB limit as per Nave documentation)\n      if (file.size > 32 * 1024 * 1024) {\n        throw new Error('File size exceeds 32MB limit');\n      }\n\n      const pbcData = await parseNaveCSV(file);\n      \n      // Validate minimum data points for meaningful PBC analysis\n      const minRequired = selectedMetricType === 'cycle_time' ? 6 : 10;\n      if (pbcData.length < minRequired) {\n        throw new Error(`Only ${pbcData.length} completed tasks found that meet the criteria. Minimum ${minRequired} data points required for meaningful ${selectedMetricType === 'cycle_time' ? 'Cycle Time' : 'Throughput'} analysis as per Vacanti's methodology.`);\n      }\n\n      onDataChange(pbcData);\n      \n    } catch (err: any) {\n      setError(err.message || 'Failed to parse Nave CSV file');\n      setPreview(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Upload Nave CSV File\n      </Typography>\n      \n      <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\n        Upload a CSV file exported from Nave to analyze your flow metrics using Process Behaviour Charts.\n        Only completed tasks (Done status/resolution) will be included, excluding \"Won't fix\" items.\n      </Typography>\n\n      {/* Metric Type Selection */}\n      <FormControl fullWidth sx={{ mb: 2 }}>\n        <InputLabel>Flow Metric to Analyze</InputLabel>\n        <Select\n          value={selectedMetricType}\n          onChange={(e) => setSelectedMetricType(e.target.value as 'cycle_time' | 'throughput')}\n        >\n          <MenuItem value=\"cycle_time\">\n            Cycle Time (Days) - Time from start to completion\n          </MenuItem>\n          <MenuItem value=\"throughput\">\n            Throughput (Items/Period) - Items completed per time period\n          </MenuItem>\n        </Select>\n      </FormControl>\n\n      <Button\n        variant=\"outlined\"\n        component=\"label\"\n        startIcon={<CloudUpload />}\n        disabled={loading}\n        fullWidth\n        sx={{ mb: 2 }}\n      >\n        Choose Nave CSV File\n        <input\n          type=\"file\"\n          accept=\".csv,text/csv,application/csv\"\n          hidden\n          onChange={handleFileUpload}\n        />\n      </Button>\n\n      {loading && (\n        <Box sx={{ mb: 2 }}>\n          <LinearProgress />\n          <Typography variant=\"body2\" sx={{ mt: 1 }}>\n            Processing Nave data for {selectedMetricType === 'cycle_time' ? 'cycle time' : 'throughput'} analysis...\n          </Typography>\n        </Box>\n      )}\n      \n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          <Typography variant=\"subtitle2\" gutterBottom>\n            Upload Error\n          </Typography>\n          {error}\n        </Alert>\n      )}\n\n      {preview && (\n        <Alert severity=\"success\" sx={{ mb: 2 }}>\n          <Typography variant=\"subtitle2\" gutterBottom>\n            <Assessment sx={{ mr: 1, verticalAlign: 'middle' }} />\n            Nave Data Successfully Processed for {selectedMetricType === 'cycle_time' ? 'Cycle Time' : 'Throughput'} Analysis\n          </Typography>\n          \n          <Stack direction=\"row\" spacing={1} sx={{ mb: 1, flexWrap: 'wrap' }}>\n            <Chip label={`${preview.completedTasks} completed tasks included`} size=\"small\" color=\"success\" />\n            <Chip label={`${preview.filteredOutTasks} tasks filtered out`} size=\"small\" color=\"info\" />\n            {selectedMetricType === 'cycle_time' ? (\n              <Chip \n                label={`Avg Cycle Time: ${preview.avgCycleTime.toFixed(1)} days`} \n                size=\"small\" \n              />\n            ) : (\n              <Chip \n                label={`${preview.completedTasks} items for throughput calculation`} \n                size=\"small\" \n              />\n            )}\n            {preview.duplicateTimestamps > 0 && (\n              <Chip \n                label={`${preview.duplicateTimestamps} items completed on same day`} \n                size=\"small\" \n                color=\"info\"\n              />\n            )}\n          </Stack>\n          \n          <Typography variant=\"body2\">\n            Date range: {preview.dateRange.start.toLocaleDateString()} to {preview.dateRange.end.toLocaleDateString()}\n          </Typography>\n          \n          <Typography variant=\"body2\" sx={{ mt: 1 }}>\n            Ready for {selectedMetricType === 'cycle_time' ? 'Cycle Time' : 'Throughput'} Process Behaviour Chart analysis. \n            Data is chronologically ordered and meets Vacanti's requirements for meaningful XmR chart analysis.\n          </Typography>\n          \n          {selectedMetricType === 'throughput' && (\n            <Typography variant=\"body2\" sx={{ mt: 1, fontStyle: 'italic' }}>\n              For throughput analysis, each completed item will be grouped by time periods to calculate items completed per period.\n            </Typography>\n          )}\n        </Alert>\n      )}\n\n      {/* Enhanced help text */}\n      <Box sx={{ mt: 2, p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>\n        <Typography variant=\"subtitle2\" gutterBottom>\n          {selectedMetricType === 'cycle_time' ? 'Cycle Time Analysis' : 'Throughput Analysis'} - Filtering Rules Applied:\n        </Typography>\n        <Typography variant=\"body2\" component=\"ul\" sx={{ pl: 2 }}>\n          <li>✅ Include: Tasks with \"Done\" status or \"Done\" resolution</li>\n          <li>❌ Exclude: Tasks with \"Won't fix\" status</li>\n          <li>❌ Exclude: Tasks with non-\"Done\" resolutions</li>\n          <li>❌ Exclude: Tasks without completion dates</li>\n          {selectedMetricType === 'cycle_time' ? (\n            <li>📊 Result: Each task becomes a data point with its cycle time in days</li>\n          ) : (\n            <li>📊 Result: Each completed item (value=1) will be grouped by time periods for throughput calculation</li>\n          )}\n          <li>🎯 Hover over chart points to see Task Key and Task Name</li>\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default FileUpload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}