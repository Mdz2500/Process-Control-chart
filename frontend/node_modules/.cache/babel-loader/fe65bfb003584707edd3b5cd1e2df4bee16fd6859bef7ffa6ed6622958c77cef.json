{"ast":null,"code":"var _jsxFileName = \"/Users/maximiliandazer/Process Control chart/Process-Control-chart/frontend/src/components/data/FileUpload.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Button, Typography, Alert, LinearProgress, FormControl, InputLabel, Select, MenuItem, Chip, Stack } from '@mui/material';\nimport { CloudUpload, Assessment } from '@mui/icons-material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = ({\n  onDataChange\n}) => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [preview, setPreview] = useState(null);\n  const [metricType, setMetricType] = useState('cycle_time');\n  const parseNaveCSV = async file => {\n    const text = await file.text();\n    const lines = text.split('\\n').filter(line => line.trim());\n    if (lines.length < 2) {\n      throw new Error('CSV file must contain at least a header row and one data row');\n    }\n\n    // Parse header to find relevant columns\n    const headers = lines[0].split(',').map(h => h.trim().toLowerCase());\n\n    // Map Nave column names to our expected fields\n    const columnMap = {\n      taskKey: headers.findIndex(h => h.includes('task key') || h.includes('id')),\n      taskName: headers.findIndex(h => h.includes('task name') || h.includes('name')),\n      startDate: headers.findIndex(h => h.includes('start date')),\n      endDate: headers.findIndex(h => h.includes('end date')),\n      status: headers.findIndex(h => h.includes('status')),\n      // Nave provides detailed time tracking in minutes\n      backlogTime: headers.findIndex(h => h.includes('backlog (mins)')),\n      inProcessTime: headers.findIndex(h => h.includes('in process (mins)')),\n      totalTime: headers.findIndex(h => h.includes('total (mins)'))\n    };\n\n    // Validate required columns exist\n    if (columnMap.startDate === -1 || columnMap.endDate === -1) {\n      throw new Error('CSV must contain \"Start date\" and \"End date\" columns for flow metrics analysis');\n    }\n    const data = [];\n    const completedTasks = [];\n    for (let i = 1; i < lines.length; i++) {\n      var _columns$columnMap$st;\n      const columns = lines[i].split(',').map(c => c.trim().replace(/\"/g, ''));\n      if (columns.length < Math.max(...Object.values(columnMap).filter(v => v !== -1))) {\n        continue; // Skip incomplete rows\n      }\n      const taskKey = columns[columnMap.taskKey] || `Task-${i}`;\n      const startDateStr = columns[columnMap.startDate];\n      const endDateStr = columns[columnMap.endDate];\n      const status = (_columns$columnMap$st = columns[columnMap.status]) === null || _columns$columnMap$st === void 0 ? void 0 : _columns$columnMap$st.toLowerCase();\n\n      // Only process completed tasks for meaningful PBC analysis\n      if (!(status !== null && status !== void 0 && status.includes('done')) && !(status !== null && status !== void 0 && status.includes('completed'))) {\n        continue;\n      }\n      if (!startDateStr || !endDateStr || endDateStr.toLowerCase().includes('backlog')) {\n        continue; // Skip tasks without completion dates\n      }\n      try {\n        const startDate = new Date(startDateStr);\n        const endDate = new Date(endDateStr);\n        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n          continue; // Skip invalid dates\n        }\n        let value;\n        if (metricType === 'cycle_time') {\n          // Calculate Cycle Time in days (as recommended in Vacanti's document)\n          const cycleTimeMs = endDate.getTime() - startDate.getTime();\n          value = cycleTimeMs / (1000 * 60 * 60 * 24); // Convert to days\n\n          // Use end date as the timestamp for when the measurement was taken\n          // Multiple items can complete on the same day - this is normal and allowed\n          data.push({\n            timestamp: endDate,\n            value: Math.round(value * 100) / 100,\n            // Round to 2 decimal places\n            label: `${taskKey}: ${value.toFixed(1)} days`\n          });\n        } else {\n          // For throughput analysis, we'll count items completed per week\n          // This will be processed differently in a separate function\n        }\n        completedTasks.push({\n          taskKey,\n          startDate,\n          endDate,\n          cycleTime: value,\n          status\n        });\n      } catch (error) {\n        console.warn(`Skipping row ${i} due to date parsing error:`, error);\n        continue;\n      }\n    }\n    if (data.length === 0) {\n      throw new Error('No completed tasks found. PBC analysis requires completed work items with start and end dates.');\n    }\n\n    // Sort by completion date for proper time series analysis (Vacanti's requirement)\n    data.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n\n    // Calculate statistics including duplicate timestamps (which are allowed)\n    const cycleTimeValues = data.map(d => d.value);\n    const avgCycleTime = cycleTimeValues.reduce((sum, val) => sum + val, 0) / cycleTimeValues.length;\n\n    // Count duplicate timestamps (for informational purposes)\n    const timestamps = data.map(d => d.timestamp.getTime());\n    const uniqueTimestamps = new Set(timestamps);\n    const duplicateTimestamps = timestamps.length - uniqueTimestamps.size;\n    setPreview({\n      totalTasks: completedTasks.length,\n      completedTasks: completedTasks.length,\n      dateRange: {\n        start: new Date(Math.min(...data.map(d => d.timestamp.getTime()))),\n        end: new Date(Math.max(...data.map(d => d.timestamp.getTime())))\n      },\n      avgCycleTime,\n      duplicateTimestamps\n    });\n    return data;\n  };\n  const handleFileUpload = async event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (!file) return;\n    setLoading(true);\n    setError(null);\n    setPreview(null);\n    try {\n      // Validate file type\n      if (!file.name.toLowerCase().endsWith('.csv')) {\n        throw new Error('Please upload a CSV file');\n      }\n\n      // Validate file size (32MB limit as per Nave documentation)\n      if (file.size > 32 * 1024 * 1024) {\n        throw new Error('File size exceeds 32MB limit');\n      }\n      const pbcData = await parseNaveCSV(file);\n\n      // Validate minimum data points for meaningful PBC analysis\n      if (pbcData.length < 6) {\n        throw new Error(`Only ${pbcData.length} completed tasks found. Minimum 6 data points required for meaningful Process Behaviour Chart analysis as per Vacanti's methodology.`);\n      }\n      onDataChange(pbcData);\n    } catch (err) {\n      setError(err.message || 'Failed to parse Nave CSV file');\n      setPreview(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Upload Nave CSV File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      sx: {\n        mb: 2\n      },\n      children: \"Upload a CSV file exported from Nave to analyze your flow metrics using Process Behaviour Charts. Supports Cycle Time and Throughput analysis as described in Vacanti's methodology.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      sx: {\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        children: \"Flow Metric to Analyze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        value: metricType,\n        onChange: e => setMetricType(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"cycle_time\",\n          children: \"Cycle Time (Days) - Time from start to completion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"throughput\",\n          children: \"Throughput (Items/Week) - Items completed per time period\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      component: \"label\",\n      startIcon: /*#__PURE__*/_jsxDEV(CloudUpload, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 20\n      }, this),\n      disabled: loading,\n      fullWidth: true,\n      sx: {\n        mb: 2\n      },\n      children: [\"Choose Nave CSV File\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".csv,text/csv,application/csv\",\n        hidden: true,\n        onChange: handleFileUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        sx: {\n          mt: 1\n        },\n        children: \"Processing Nave data for flow metrics analysis...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle2\",\n        gutterBottom: true,\n        children: \"Upload Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this), error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }, this), preview && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"success\",\n      sx: {\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle2\",\n        gutterBottom: true,\n        children: [/*#__PURE__*/_jsxDEV(Assessment, {\n          sx: {\n            mr: 1,\n            verticalAlign: 'middle'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this), \"Nave Data Successfully Processed\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"row\",\n        spacing: 1,\n        sx: {\n          mb: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Chip, {\n          label: `${preview.completedTasks} completed tasks`,\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Chip, {\n          label: `Avg ${metricType === 'cycle_time' ? 'Cycle Time' : 'Throughput'}: ${preview.avgCycleTime.toFixed(1)} ${metricType === 'cycle_time' ? 'days' : 'items/week'}`,\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this), preview.duplicateTimestamps > 0 && /*#__PURE__*/_jsxDEV(Chip, {\n          label: `${preview.duplicateTimestamps} items completed on same day`,\n          size: \"small\",\n          color: \"info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"Date range: \", preview.dateRange.start.toLocaleDateString(), \" to \", preview.dateRange.end.toLocaleDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        sx: {\n          mt: 1\n        },\n        children: \"Ready for Process Behaviour Chart analysis. Data is chronologically ordered and meets Vacanti's requirements for meaningful XmR chart analysis.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this), preview.duplicateTimestamps > 0 && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        sx: {\n          mt: 1,\n          fontStyle: 'italic'\n        },\n        children: \"Note: Multiple items completing on the same day is normal in flow metrics and allowed per Vacanti's methodology.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 2,\n        p: 2,\n        bgcolor: 'grey.50',\n        borderRadius: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle2\",\n        gutterBottom: true,\n        children: \"Vacanti's Requirements for Flow Metrics:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        component: \"ul\",\n        sx: {\n          pl: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Export your data from Nave with \\\"Start date\\\" and \\\"End date\\\" columns\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Only completed tasks (status = \\\"Done\\\") will be analyzed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Data will be sorted chronologically to preserve temporal context\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Duplicate timestamps are allowed - multiple items can complete on same day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Minimum 6 completed tasks required for reliable PBC analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Moving ranges will capture local, short-term routine variation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"u9IxTW3OTp+QnIbArhtZeeEXhTQ=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","Box","Button","Typography","Alert","LinearProgress","FormControl","InputLabel","Select","MenuItem","Chip","Stack","CloudUpload","Assessment","jsxDEV","_jsxDEV","FileUpload","onDataChange","_s","loading","setLoading","error","setError","preview","setPreview","metricType","setMetricType","parseNaveCSV","file","text","lines","split","filter","line","trim","length","Error","headers","map","h","toLowerCase","columnMap","taskKey","findIndex","includes","taskName","startDate","endDate","status","backlogTime","inProcessTime","totalTime","data","completedTasks","i","_columns$columnMap$st","columns","c","replace","Math","max","Object","values","v","startDateStr","endDateStr","Date","isNaN","getTime","value","cycleTimeMs","push","timestamp","round","label","toFixed","cycleTime","console","warn","sort","a","b","cycleTimeValues","d","avgCycleTime","reduce","sum","val","timestamps","uniqueTimestamps","Set","duplicateTimestamps","size","totalTasks","dateRange","start","min","end","handleFileUpload","event","_event$target$files","target","files","name","endsWith","pbcData","err","message","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","sx","mb","fullWidth","onChange","e","component","startIcon","disabled","type","accept","hidden","mt","severity","mr","verticalAlign","direction","spacing","toLocaleDateString","fontStyle","p","bgcolor","borderRadius","pl","_c","$RefreshReg$"],"sources":["/Users/maximiliandazer/Process Control chart/Process-Control-chart/frontend/src/components/data/FileUpload.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  Button,\n  Typography,\n  Alert,\n  LinearProgress,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  Stack\n} from '@mui/material';\nimport { CloudUpload, Assessment } from '@mui/icons-material';\nimport { DataPoint } from '../../types';\n\ninterface FileUploadProps {\n  onDataChange: (data: DataPoint[]) => void;\n}\n\ninterface NaveDataPreview {\n  totalTasks: number;\n  completedTasks: number;\n  dateRange: { start: Date; end: Date };\n  avgCycleTime: number;\n  duplicateTimestamps: number;\n}\n\nconst FileUpload: React.FC<FileUploadProps> = ({ onDataChange }) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [preview, setPreview] = useState<NaveDataPreview | null>(null);\n  const [metricType, setMetricType] = useState<'cycle_time' | 'throughput'>('cycle_time');\n\n  const parseNaveCSV = async (file: File): Promise<DataPoint[]> => {\n    const text = await file.text();\n    const lines = text.split('\\n').filter(line => line.trim());\n    \n    if (lines.length < 2) {\n      throw new Error('CSV file must contain at least a header row and one data row');\n    }\n\n    // Parse header to find relevant columns\n    const headers = lines[0].split(',').map(h => h.trim().toLowerCase());\n    \n    // Map Nave column names to our expected fields\n    const columnMap = {\n      taskKey: headers.findIndex(h => h.includes('task key') || h.includes('id')),\n      taskName: headers.findIndex(h => h.includes('task name') || h.includes('name')),\n      startDate: headers.findIndex(h => h.includes('start date')),\n      endDate: headers.findIndex(h => h.includes('end date')),\n      status: headers.findIndex(h => h.includes('status')),\n      // Nave provides detailed time tracking in minutes\n      backlogTime: headers.findIndex(h => h.includes('backlog (mins)')),\n      inProcessTime: headers.findIndex(h => h.includes('in process (mins)')),\n      totalTime: headers.findIndex(h => h.includes('total (mins)'))\n    };\n\n    // Validate required columns exist\n    if (columnMap.startDate === -1 || columnMap.endDate === -1) {\n      throw new Error('CSV must contain \"Start date\" and \"End date\" columns for flow metrics analysis');\n    }\n\n    const data: DataPoint[] = [];\n    const completedTasks: any[] = [];\n    \n    for (let i = 1; i < lines.length; i++) {\n      const columns = lines[i].split(',').map(c => c.trim().replace(/\"/g, ''));\n      \n      if (columns.length < Math.max(...Object.values(columnMap).filter(v => v !== -1))) {\n        continue; // Skip incomplete rows\n      }\n\n      const taskKey = columns[columnMap.taskKey] || `Task-${i}`;\n      const startDateStr = columns[columnMap.startDate];\n      const endDateStr = columns[columnMap.endDate];\n      const status = columns[columnMap.status]?.toLowerCase();\n      \n      // Only process completed tasks for meaningful PBC analysis\n      if (!status?.includes('done') && !status?.includes('completed')) {\n        continue;\n      }\n\n      if (!startDateStr || !endDateStr || endDateStr.toLowerCase().includes('backlog')) {\n        continue; // Skip tasks without completion dates\n      }\n\n      try {\n        const startDate = new Date(startDateStr);\n        const endDate = new Date(endDateStr);\n        \n        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n          continue; // Skip invalid dates\n        }\n\n        let value: number;\n        \n        if (metricType === 'cycle_time') {\n          // Calculate Cycle Time in days (as recommended in Vacanti's document)\n          const cycleTimeMs = endDate.getTime() - startDate.getTime();\n          value = cycleTimeMs / (1000 * 60 * 60 * 24); // Convert to days\n          \n          // Use end date as the timestamp for when the measurement was taken\n          // Multiple items can complete on the same day - this is normal and allowed\n          data.push({\n            timestamp: endDate,\n            value: Math.round(value * 100) / 100, // Round to 2 decimal places\n            label: `${taskKey}: ${value.toFixed(1)} days`\n          });\n        } else {\n          // For throughput analysis, we'll count items completed per week\n          // This will be processed differently in a separate function\n        }\n\n        completedTasks.push({\n          taskKey,\n          startDate,\n          endDate,\n          cycleTime: value,\n          status\n        });\n        \n      } catch (error) {\n        console.warn(`Skipping row ${i} due to date parsing error:`, error);\n        continue;\n      }\n    }\n\n    if (data.length === 0) {\n      throw new Error('No completed tasks found. PBC analysis requires completed work items with start and end dates.');\n    }\n\n    // Sort by completion date for proper time series analysis (Vacanti's requirement)\n    data.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n\n    // Calculate statistics including duplicate timestamps (which are allowed)\n    const cycleTimeValues = data.map(d => d.value);\n    const avgCycleTime = cycleTimeValues.reduce((sum, val) => sum + val, 0) / cycleTimeValues.length;\n    \n    // Count duplicate timestamps (for informational purposes)\n    const timestamps = data.map(d => d.timestamp.getTime());\n    const uniqueTimestamps = new Set(timestamps);\n    const duplicateTimestamps = timestamps.length - uniqueTimestamps.size;\n    \n    setPreview({\n      totalTasks: completedTasks.length,\n      completedTasks: completedTasks.length,\n      dateRange: {\n        start: new Date(Math.min(...data.map(d => d.timestamp.getTime()))),\n        end: new Date(Math.max(...data.map(d => d.timestamp.getTime())))\n      },\n      avgCycleTime,\n      duplicateTimestamps\n    });\n\n    return data;\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setLoading(true);\n    setError(null);\n    setPreview(null);\n\n    try {\n      // Validate file type\n      if (!file.name.toLowerCase().endsWith('.csv')) {\n        throw new Error('Please upload a CSV file');\n      }\n\n      // Validate file size (32MB limit as per Nave documentation)\n      if (file.size > 32 * 1024 * 1024) {\n        throw new Error('File size exceeds 32MB limit');\n      }\n\n      const pbcData = await parseNaveCSV(file);\n      \n      // Validate minimum data points for meaningful PBC analysis\n      if (pbcData.length < 6) {\n        throw new Error(`Only ${pbcData.length} completed tasks found. Minimum 6 data points required for meaningful Process Behaviour Chart analysis as per Vacanti's methodology.`);\n      }\n\n      onDataChange(pbcData);\n      \n    } catch (err: any) {\n      setError(err.message || 'Failed to parse Nave CSV file');\n      setPreview(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Upload Nave CSV File\n      </Typography>\n      \n      <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\n        Upload a CSV file exported from Nave to analyze your flow metrics using Process Behaviour Charts.\n        Supports Cycle Time and Throughput analysis as described in Vacanti's methodology.\n      </Typography>\n\n      {/* Metric Type Selection */}\n      <FormControl fullWidth sx={{ mb: 2 }}>\n        <InputLabel>Flow Metric to Analyze</InputLabel>\n        <Select\n          value={metricType}\n          onChange={(e) => setMetricType(e.target.value as 'cycle_time' | 'throughput')}\n        >\n          <MenuItem value=\"cycle_time\">\n            Cycle Time (Days) - Time from start to completion\n          </MenuItem>\n          <MenuItem value=\"throughput\">\n            Throughput (Items/Week) - Items completed per time period\n          </MenuItem>\n        </Select>\n      </FormControl>\n\n      <Button\n        variant=\"outlined\"\n        component=\"label\"\n        startIcon={<CloudUpload />}\n        disabled={loading}\n        fullWidth\n        sx={{ mb: 2 }}\n      >\n        Choose Nave CSV File\n        <input\n          type=\"file\"\n          accept=\".csv,text/csv,application/csv\"\n          hidden\n          onChange={handleFileUpload}\n        />\n      </Button>\n\n      {loading && (\n        <Box sx={{ mb: 2 }}>\n          <LinearProgress />\n          <Typography variant=\"body2\" sx={{ mt: 1 }}>\n            Processing Nave data for flow metrics analysis...\n          </Typography>\n        </Box>\n      )}\n      \n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          <Typography variant=\"subtitle2\" gutterBottom>\n            Upload Error\n          </Typography>\n          {error}\n        </Alert>\n      )}\n\n      {preview && (\n        <Alert severity=\"success\" sx={{ mb: 2 }}>\n          <Typography variant=\"subtitle2\" gutterBottom>\n            <Assessment sx={{ mr: 1, verticalAlign: 'middle' }} />\n            Nave Data Successfully Processed\n          </Typography>\n          \n          <Stack direction=\"row\" spacing={1} sx={{ mb: 1 }}>\n            <Chip label={`${preview.completedTasks} completed tasks`} size=\"small\" />\n            <Chip \n              label={`Avg ${metricType === 'cycle_time' ? 'Cycle Time' : 'Throughput'}: ${preview.avgCycleTime.toFixed(1)} ${metricType === 'cycle_time' ? 'days' : 'items/week'}`} \n              size=\"small\" \n            />\n            {preview.duplicateTimestamps > 0 && (\n              <Chip \n                label={`${preview.duplicateTimestamps} items completed on same day`} \n                size=\"small\" \n                color=\"info\"\n              />\n            )}\n          </Stack>\n          \n          <Typography variant=\"body2\">\n            Date range: {preview.dateRange.start.toLocaleDateString()} to {preview.dateRange.end.toLocaleDateString()}\n          </Typography>\n          \n          <Typography variant=\"body2\" sx={{ mt: 1 }}>\n            Ready for Process Behaviour Chart analysis. Data is chronologically ordered and meets \n            Vacanti's requirements for meaningful XmR chart analysis.\n          </Typography>\n          \n          {preview.duplicateTimestamps > 0 && (\n            <Typography variant=\"body2\" sx={{ mt: 1, fontStyle: 'italic' }}>\n              Note: Multiple items completing on the same day is normal in flow metrics and \n              allowed per Vacanti's methodology.\n            </Typography>\n          )}\n        </Alert>\n      )}\n\n      {/* Nave-specific help text */}\n      <Box sx={{ mt: 2, p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>\n        <Typography variant=\"subtitle2\" gutterBottom>\n          Vacanti's Requirements for Flow Metrics:\n        </Typography>\n        <Typography variant=\"body2\" component=\"ul\" sx={{ pl: 2 }}>\n          <li>Export your data from Nave with \"Start date\" and \"End date\" columns</li>\n          <li>Only completed tasks (status = \"Done\") will be analyzed</li>\n          <li>Data will be sorted chronologically to preserve temporal context</li>\n          <li>Duplicate timestamps are allowed - multiple items can complete on same day</li>\n          <li>Minimum 6 completed tasks required for reliable PBC analysis</li>\n          <li>Moving ranges will capture local, short-term routine variation</li>\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default FileUpload;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}