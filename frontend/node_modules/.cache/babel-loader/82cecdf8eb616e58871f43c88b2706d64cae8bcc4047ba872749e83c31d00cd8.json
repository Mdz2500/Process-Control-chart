{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 30000\n});\nexport const calculatePBC = async request => {\n  try {\n    console.log('Sending PBC request:', request);\n    const formattedData = request.data.map(point => ({\n      timestamp: point.timestamp.toISOString(),\n      value: Number(point.value),\n      label: point.label || ''\n    }));\n    const payload = {\n      data: formattedData,\n      baselinePeriod: request.baselinePeriod || Math.min(20, request.data.length),\n      detectionRules: request.detectionRules || ['rule1', 'rule4'],\n      metricType: request.metricType || 'cycle_time'\n    };\n    console.log('Final payload:', payload);\n    const response = await api.post('/api/calculate-pbc', payload);\n    console.log('PBC response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2, _error$response3;\n    console.error('PBC calculation error:', error);\n    console.error('Error response:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n    if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 400) {\n      throw new Error(error.response.data.detail || 'Invalid data provided');\n    } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 500) {\n      throw new Error('Server error during calculation. Please check your data format.');\n    } else if (error.code === 'ECONNREFUSED') {\n      throw new Error('Cannot connect to backend server. Please ensure the backend is running on port 8000.');\n    } else {\n      throw new Error(`Failed to calculate PBC: ${error.message}`);\n    }\n  }\n};\nexport const calculateThroughput = async request => {\n  try {\n    console.log('Sending throughput request:', request);\n    const formattedData = request.data.map(point => ({\n      timestamp: point.timestamp.toISOString(),\n      value: Number(point.value),\n      label: point.label || ''\n    }));\n    const payload = {\n      data: formattedData,\n      period: request.period,\n      baselinePeriod: request.baselinePeriod || Math.min(20, request.data.length),\n      detectionRules: request.detectionRules || ['rule1', 'rule4']\n    };\n    console.log('Throughput payload:', payload);\n    const response = await api.post('/api/calculate-throughput', payload);\n    console.log('Throughput response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response5;\n    console.error('Throughput calculation error:', error);\n    if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 400) {\n      throw new Error(error.response.data.detail || 'Invalid data provided for throughput analysis');\n    } else if (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) === 500) {\n      throw new Error('Server error during throughput calculation.');\n    } else {\n      throw new Error(`Failed to calculate throughput: ${error.message}`);\n    }\n  }\n};\nexport const healthCheck = async () => {\n  try {\n    const response = await api.get('/api/health');\n    return response.data;\n  } catch (error) {\n    console.error('Health check failed:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","timeout","calculatePBC","request","console","log","formattedData","data","map","point","timestamp","toISOString","value","Number","label","payload","baselinePeriod","Math","min","length","detectionRules","metricType","response","post","error","_error$response","_error$response2","_error$response3","status","Error","detail","code","message","calculateThroughput","period","_error$response4","_error$response5","healthCheck","get"],"sources":["/Users/maximiliandazer/Process Control chart/Process-Control-chart/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { DataPoint, PBCAnalysis, ThroughputResponse } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 30000,\n});\n\nexport interface PBCRequest {\n  data: DataPoint[];\n  baselinePeriod?: number;\n  detectionRules?: string[];\n  metricType?: 'cycle_time' | 'throughput';\n}\n\nexport interface ThroughputRequest {\n  data: DataPoint[];\n  period: 'daily' | 'weekly' | 'monthly';\n  baselinePeriod?: number;\n  detectionRules?: string[];\n}\n\nexport const calculatePBC = async (request: PBCRequest): Promise<PBCAnalysis> => {\n  try {\n    console.log('Sending PBC request:', request);\n    \n    const formattedData = request.data.map(point => ({\n      timestamp: point.timestamp.toISOString(),\n      value: Number(point.value),\n      label: point.label || ''\n    }));\n\n    const payload = {\n      data: formattedData,\n      baselinePeriod: request.baselinePeriod || Math.min(20, request.data.length),\n      detectionRules: request.detectionRules || ['rule1', 'rule4'],\n      metricType: request.metricType || 'cycle_time'\n    };\n\n    console.log('Final payload:', payload);\n    \n    const response = await api.post('/api/calculate-pbc', payload);\n    \n    console.log('PBC response:', response.data);\n    return response.data;\n    \n  } catch (error: any) {\n    console.error('PBC calculation error:', error);\n    console.error('Error response:', error.response?.data);\n    \n    if (error.response?.status === 400) {\n      throw new Error(error.response.data.detail || 'Invalid data provided');\n    } else if (error.response?.status === 500) {\n      throw new Error('Server error during calculation. Please check your data format.');\n    } else if (error.code === 'ECONNREFUSED') {\n      throw new Error('Cannot connect to backend server. Please ensure the backend is running on port 8000.');\n    } else {\n      throw new Error(`Failed to calculate PBC: ${error.message}`);\n    }\n  }\n};\n\nexport const calculateThroughput = async (request: ThroughputRequest): Promise<ThroughputResponse> => {\n  try {\n    console.log('Sending throughput request:', request);\n    \n    const formattedData = request.data.map(point => ({\n      timestamp: point.timestamp.toISOString(),\n      value: Number(point.value),\n      label: point.label || ''\n    }));\n\n    const payload = {\n      data: formattedData,\n      period: request.period,\n      baselinePeriod: request.baselinePeriod || Math.min(20, request.data.length),\n      detectionRules: request.detectionRules || ['rule1', 'rule4']\n    };\n\n    console.log('Throughput payload:', payload);\n    \n    const response = await api.post('/api/calculate-throughput', payload);\n    \n    console.log('Throughput response:', response.data);\n    return response.data;\n    \n  } catch (error: any) {\n    console.error('Throughput calculation error:', error);\n    \n    if (error.response?.status === 400) {\n      throw new Error(error.response.data.detail || 'Invalid data provided for throughput analysis');\n    } else if (error.response?.status === 500) {\n      throw new Error('Server error during throughput calculation.');\n    } else {\n      throw new Error(`Failed to calculate throughput: ${error.message}`);\n    }\n  }\n};\n\nexport const healthCheck = async (): Promise<{ status: string }> => {\n  try {\n    const response = await api.get('/api/health');\n    return response.data;\n  } catch (error) {\n    console.error('Health check failed:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}