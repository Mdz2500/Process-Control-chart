{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const calculatePBC = async request => {\n  try {\n    const response = await api.post('/api/calculate-pbc', {\n      data: request.data.map(point => ({\n        timestamp: point.timestamp.toISOString(),\n        value: point.value,\n        label: point.label\n      })),\n      baseline_period: request.baselinePeriod || 20,\n      detection_rules: request.detectionRules || ['rule1', 'rule4']\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error calculating PBC:', error);\n    throw error;\n  }\n};\nexport const healthCheck = async () => {\n  try {\n    const response = await api.get('/api/health');\n    return response.data;\n  } catch (error) {\n    console.error('Health check failed:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","calculatePBC","request","response","post","data","map","point","timestamp","toISOString","value","label","baseline_period","baselinePeriod","detection_rules","detectionRules","error","console","healthCheck","get"],"sources":["/Users/maximiliandazer/Process Control chart/Process-Control-chart/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { DataPoint, PBCAnalysis } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport interface PBCRequest {\n  data: DataPoint[];\n  baselinePeriod?: number;\n  detectionRules?: string[];\n}\n\nexport const calculatePBC = async (request: PBCRequest): Promise<PBCAnalysis> => {\n  try {\n    const response = await api.post('/api/calculate-pbc', {\n      data: request.data.map(point => ({\n        timestamp: point.timestamp.toISOString(),\n        value: point.value,\n        label: point.label\n      })),\n      baseline_period: request.baselinePeriod || 20,\n      detection_rules: request.detectionRules || ['rule1', 'rule4']\n    });\n    \n    return response.data;\n  } catch (error) {\n    console.error('Error calculating PBC:', error);\n    throw error;\n  }\n};\n\nexport const healthCheck = async (): Promise<{ status: string }> => {\n  try {\n    const response = await api.get('/api/health');\n    return response.data;\n  } catch (error) {\n    console.error('Health check failed:', error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAQF,OAAO,MAAMC,YAAY,GAAG,MAAOC,OAAmB,IAA2B;EAC/E,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,oBAAoB,EAAE;MACpDC,IAAI,EAAEH,OAAO,CAACG,IAAI,CAACC,GAAG,CAACC,KAAK,KAAK;QAC/BC,SAAS,EAAED,KAAK,CAACC,SAAS,CAACC,WAAW,CAAC,CAAC;QACxCC,KAAK,EAAEH,KAAK,CAACG,KAAK;QAClBC,KAAK,EAAEJ,KAAK,CAACI;MACf,CAAC,CAAC,CAAC;MACHC,eAAe,EAAEV,OAAO,CAACW,cAAc,IAAI,EAAE;MAC7CC,eAAe,EAAEZ,OAAO,CAACa,cAAc,IAAI,CAAC,OAAO,EAAE,OAAO;IAC9D,CAAC,CAAC;IAEF,OAAOZ,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAA,KAAyC;EAClE,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMN,GAAG,CAACsB,GAAG,CAAC,aAAa,CAAC;IAC7C,OAAOhB,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}