{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n// In src/services/api.ts\nexport const calculatePBC = async request => {\n  try {\n    console.log('Sending PBC request:', request); // Debug log\n\n    const response = await api.post('/api/calculate-pbc', {\n      data: request.data.map(point => ({\n        timestamp: point.timestamp.toISOString(),\n        value: point.value,\n        label: point.label\n      })),\n      baseline_period: request.baselinePeriod || Math.min(20, request.data.length),\n      detection_rules: request.detectionRules || ['rule1', 'rule4']\n    });\n    console.log('PBC response:', response.data); // Debug log\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error('PBC calculation error:', error);\n\n    // Provide more specific error messages\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 400) {\n      throw new Error(error.response.data.detail || 'Invalid data provided');\n    } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 500) {\n      throw new Error('Server error during calculation. Please check your data format.');\n    } else {\n      throw new Error('Failed to calculate PBC. Please check your connection and data.');\n    }\n  }\n};\nexport const healthCheck = async () => {\n  try {\n    const response = await api.get('/api/health');\n    return response.data;\n  } catch (error) {\n    console.error('Health check failed:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","calculatePBC","request","console","log","response","post","data","map","point","timestamp","toISOString","value","label","baseline_period","baselinePeriod","Math","min","length","detection_rules","detectionRules","error","_error$response","_error$response2","status","Error","detail","healthCheck","get"],"sources":["/Users/maximiliandazer/Process Control chart/Process-Control-chart/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { DataPoint, PBCAnalysis } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport interface PBCRequest {\n  data: DataPoint[];\n  baselinePeriod?: number;\n  detectionRules?: string[];\n}\n\n// In src/services/api.ts\nexport const calculatePBC = async (request: PBCRequest): Promise<PBCAnalysis> => {\n  try {\n    console.log('Sending PBC request:', request); // Debug log\n    \n    const response = await api.post('/api/calculate-pbc', {\n      data: request.data.map(point => ({\n        timestamp: point.timestamp.toISOString(),\n        value: point.value,\n        label: point.label\n      })),\n      baseline_period: request.baselinePeriod || Math.min(20, request.data.length),\n      detection_rules: request.detectionRules || ['rule1', 'rule4']\n    });\n    \n    console.log('PBC response:', response.data); // Debug log\n    return response.data;\n    \n  } catch (error: any) {\n    console.error('PBC calculation error:', error);\n    \n    // Provide more specific error messages\n    if (error.response?.status === 400) {\n      throw new Error(error.response.data.detail || 'Invalid data provided');\n    } else if (error.response?.status === 500) {\n      throw new Error('Server error during calculation. Please check your data format.');\n    } else {\n      throw new Error('Failed to calculate PBC. Please check your connection and data.');\n    }\n  }\n};\n\n\nexport const healthCheck = async (): Promise<{ status: string }> => {\n  try {\n    const response = await api.get('/api/health');\n    return response.data;\n  } catch (error) {\n    console.error('Health check failed:', error);\n    throw error;\n  }\n};\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAQF;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,OAAmB,IAA2B;EAC/E,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,OAAO,CAAC,CAAC,CAAC;;IAE9C,MAAMG,QAAQ,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,oBAAoB,EAAE;MACpDC,IAAI,EAAEL,OAAO,CAACK,IAAI,CAACC,GAAG,CAACC,KAAK,KAAK;QAC/BC,SAAS,EAAED,KAAK,CAACC,SAAS,CAACC,WAAW,CAAC,CAAC;QACxCC,KAAK,EAAEH,KAAK,CAACG,KAAK;QAClBC,KAAK,EAAEJ,KAAK,CAACI;MACf,CAAC,CAAC,CAAC;MACHC,eAAe,EAAEZ,OAAO,CAACa,cAAc,IAAIC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEf,OAAO,CAACK,IAAI,CAACW,MAAM,CAAC;MAC5EC,eAAe,EAAEjB,OAAO,CAACkB,cAAc,IAAI,CAAC,OAAO,EAAE,OAAO;IAC9D,CAAC,CAAC;IAEFjB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;IAC7C,OAAOF,QAAQ,CAACE,IAAI;EAEtB,CAAC,CAAC,OAAOc,KAAU,EAAE;IAAA,IAAAC,eAAA,EAAAC,gBAAA;IACnBpB,OAAO,CAACkB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;;IAE9C;IACA,IAAI,EAAAC,eAAA,GAAAD,KAAK,CAAChB,QAAQ,cAAAiB,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,EAAE;MAClC,MAAM,IAAIC,KAAK,CAACJ,KAAK,CAAChB,QAAQ,CAACE,IAAI,CAACmB,MAAM,IAAI,uBAAuB,CAAC;IACxE,CAAC,MAAM,IAAI,EAAAH,gBAAA,GAAAF,KAAK,CAAChB,QAAQ,cAAAkB,gBAAA,uBAAdA,gBAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;MACzC,MAAM,IAAIC,KAAK,CAAC,iEAAiE,CAAC;IACpF,CAAC,MAAM;MACL,MAAM,IAAIA,KAAK,CAAC,iEAAiE,CAAC;IACpF;EACF;AACF,CAAC;AAGD,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAA,KAAyC;EAClE,IAAI;IACF,MAAMtB,QAAQ,GAAG,MAAMR,GAAG,CAAC+B,GAAG,CAAC,aAAa,CAAC;IAC7C,OAAOvB,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdlB,OAAO,CAACkB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}